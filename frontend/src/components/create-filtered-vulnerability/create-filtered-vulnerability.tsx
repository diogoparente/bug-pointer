import { SubHeader } from "@/components/text";
import * as Dialog from "@radix-ui/react-dialog";
import * as RadioGroup from "@radix-ui/react-radio-group";
import { useForm } from "react-hook-form";
import { TextArea } from "@/components/text-area";
import { Input } from "@/components/input";
import Button from "@/components/button";
import { SetStateAction, useEffect, useState } from "react";
import Tag from "../tag";

interface FilteredBugInput {
  name: string;
  proofOfConcept: string;
}

const defaultValues: FilteredBugInput = {
  name: "",
  proofOfConcept: "",
};

interface SeverityRadioGroupProps {
  setSeverity: React.Dispatch<SetStateAction<SeverityDegrees | undefined>>;
}

const SeverityRadioGroup = ({ setSeverity }: SeverityRadioGroupProps) => {
  const onValueChange = (value: string) => setSeverity(value as SeverityDegrees);

  return (
    <div>
      <label className={"mb-1 block text-sm font-medium leading-6 text-mainGreen"}>Severity Degree</label>
      <RadioGroup.Root className="flex flex-row gap-8" onValueChange={onValueChange}>
        {["Critical", "High", "Medium", "Low"].map((status) => (
          <div className="flex items-center" key={status}>
            <RadioGroup.Item
              className="h-[25px] w-[25px] cursor-default rounded-full bg-highlightGrey outline-none hover:bg-highlightGrey/80"
              value={status}
              id={status}
            >
              <RadioGroup.Indicator className="relative flex h-full w-full items-center justify-center after:block after:h-[15px] after:w-[15px] after:rounded-full after:bg-mainGreen after:content-['']" />
            </RadioGroup.Item>
            <label className="pl-[10px] text-[15px] leading-none text-white" htmlFor={status}>
              {status}
            </label>
          </div>
        ))}
      </RadioGroup.Root>
    </div>
  );
};

interface AssociatedVulnerabilitiesManagerProps {
  associatedVulnerabilities: ExtendedSubmittedVulnerability[];
  submittedVulnerabilities: ExtendedSubmittedVulnerability[];
  setAssociatedVulnerabilities: React.Dispatch<SetStateAction<ExtendedSubmittedVulnerability[]>>;
}

const buildSelectableVulnerabilities = (
  associatedVulnerabilities: ExtendedSubmittedVulnerability[],
  submittedVulnerabilities: ExtendedSubmittedVulnerability[]
) => [
  ...associatedVulnerabilities,
  ...submittedVulnerabilities.filter(
    (vul) => vul.status === "Pending" && associatedVulnerabilities.findIndex((v) => v.id === vul.id) === -1
  ),
];

const AssociatedVulnerabilitiesManager = ({
  associatedVulnerabilities,
  submittedVulnerabilities,
  setAssociatedVulnerabilities,
}: AssociatedVulnerabilitiesManagerProps) => {
  const [vulAux, setVulAux] = useState(
    buildSelectableVulnerabilities(associatedVulnerabilities, submittedVulnerabilities)
  );

  useEffect(() => {
    setVulAux(buildSelectableVulnerabilities(associatedVulnerabilities, submittedVulnerabilities));
  }, [associatedVulnerabilities, submittedVulnerabilities]);

  const handleVulnerabilityStatusChange = (id: string) => {
    setVulAux((prev) =>
      prev.map((vul) => (vul.id === id ? { ...vul, status: vul.status === "Pending" ? "Reviewed" : "Pending" } : vul))
    );
  };

  const handleSaveVulnerabilities = () => {
    setAssociatedVulnerabilities(vulAux.filter((vul) => vul.status === "Reviewed"));
  };

  return (
    <Dialog.Portal>
      <Dialog.Overlay className="fixed inset-0 bg-black/70 data-[state=open]:animate-overlayShow" />
      <Dialog.Content className="fixed left-[50%] top-[50%] flex max-h-[85vh] translate-x-[-50%] translate-y-[-50%] flex-col items-center justify-between rounded-md bg-backgroundGrey px-12 py-8 focus:outline-none data-[state=open]:animate-contentShow">
        <SubHeader className="text-2xl">Associated Vulnerabilities</SubHeader>
        <div className="mb-8 mt-6 flex flex-col gap-6">
          {vulAux.map((vulnerability) => (
            <button key={vulnerability.id} onClick={() => handleVulnerabilityStatusChange(vulnerability.id)}>
              <Tag color={vulnerability.status === "Pending" ? "grey" : "green"}>{vulnerability.name}</Tag>
            </button>
          ))}
        </div>
        <Dialog.Close asChild>
          <Button color="green" size="small" onClick={handleSaveVulnerabilities}>
            Save
          </Button>
        </Dialog.Close>
      </Dialog.Content>
    </Dialog.Portal>
  );
};

interface CreateFilteredVulnerabilityProps {
  submittedVulnerabilities: ExtendedSubmittedVulnerability[];
  setSubmittedVulnerabilities: React.Dispatch<SetStateAction<ExtendedSubmittedVulnerability[]>>;
  setFilteredVulnerabilities: React.Dispatch<SetStateAction<FilteredVulnerability[]>>;
}

const CreateFilteredVulnerability = ({
  submittedVulnerabilities,
  setSubmittedVulnerabilities,
  setFilteredVulnerabilities,
}: CreateFilteredVulnerabilityProps) => {
  const { register, handleSubmit } = useForm<FilteredBugInput>({ defaultValues });

  const [severity, setSeverity] = useState<SeverityDegrees | undefined>();

  const [associatedVulnerabilities, setAssociatedVulnerabilities] = useState<ExtendedSubmittedVulnerability[]>([]);

  useEffect(() => {
    const discardedVul = submittedVulnerabilities.filter((vul) => vul.status === "Discarded");
    setAssociatedVulnerabilities((prev) => prev.filter((vul) => discardedVul.findIndex((v) => v.id === vul.id) === -1));
  }, [submittedVulnerabilities]);

  const onSubmitHandler = (values: FilteredBugInput) => {
    if (!severity) return;
    setSubmittedVulnerabilities((prev) =>
      prev.map((vul) => {
        if (associatedVulnerabilities.findIndex((v) => v.id === vul.id) !== -1) {
          return { ...vul, status: "Reviewed" };
        }
        return vul;
      })
    );
    setFilteredVulnerabilities((prev) => [
      ...prev,
      { ...values, severity, id: (Math.random() * 1000 + 1).toFixed(0), associatedVulnerabilities },
    ]);
    setAssociatedVulnerabilities([]);
    setSeverity(undefined);
  };

  return (
    <div className="flex flex-col gap-4">
      <SubHeader>Create Filtered Bug</SubHeader>
      <form onSubmit={handleSubmit(onSubmitHandler)} className="flex flex-col gap-4">
        <Input color="green" type="text" label="Name" register={register} name="name" />
        <SeverityRadioGroup setSeverity={setSeverity} />
        <div className="flex w-full flex-row justify-between">
          <SubHeader>Included Vulnerabilities</SubHeader>
          <Dialog.Root>
            <Dialog.Trigger asChild>
              <Button size="small" color="green">
                Manage
              </Button>
            </Dialog.Trigger>
            <AssociatedVulnerabilitiesManager
              associatedVulnerabilities={associatedVulnerabilities}
              submittedVulnerabilities={submittedVulnerabilities}
              setAssociatedVulnerabilities={setAssociatedVulnerabilities}
            />
          </Dialog.Root>
        </div>
        <div className="flex flex-row gap-2">
          {associatedVulnerabilities
            .filter((vul) => vul.status === "Reviewed")
            .map((vulnerability) => (
              <Tag color="green" key={vulnerability.id}>
                {vulnerability.name}
              </Tag>
            ))}
        </div>
        <TextArea
          color="green"
          label="Proof of Concept"
          className="min-h-[14rem] flex-1"
          register={register}
          name="proofOfConcept"
        />
        <Button color="green" size="small" className="mx-auto mt-4 w-fit">
          Create Filtered Vulnerability
        </Button>
      </form>
    </div>
  );
};

export { CreateFilteredVulnerability };
